// <auto-generated />
using System;
using ITC.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITC_BE.Migrations
{
    [DbContext(typeof(ITCDBContext))]
    [Migration("20230603064627_UpdateRefactorDb")]
    partial class UpdateRefactorDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ITC.Data.Entities.Account", b =>
                {
                    b.Property<Guid?>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FireBaseToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UrlAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("PhoneNumber IS NOT NULL");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("ITC.Data.Entities.AssignTask", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("TasksId");

                    b.ToTable("AssignTask");
                });

            modelBuilder.Entity("ITC.Data.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("ITC.Data.Entities.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Campus");
                });

            modelBuilder.Entity("ITC.Data.Entities.CancelProject", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HeaderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.ToTable("CancelProject");
                });

            modelBuilder.Entity("ITC.Data.Entities.CommentTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CheckEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TasksId");

                    b.ToTable("CommentTask");
                });

            modelBuilder.Entity("ITC.Data.Entities.ConfigProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaxStaff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxStudent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinStaff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinStudent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalProjectLeader")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConfigProject");
                });

            modelBuilder.Entity("ITC.Data.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CourseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatorAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseName")
                        .IsUnique()
                        .HasFilter("[CourseName] IS NOT NULL");

                    b.HasIndex("CreatorAccountId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("ITC.Data.Entities.Deputy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("PartnerId");

                    b.ToTable("Deputy");
                });

            modelBuilder.Entity("ITC.Data.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtenstion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkReportUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ITC.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FeedBacksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParenFeedBacksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedBacksId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("FeedBack");
                });

            modelBuilder.Entity("ITC.Data.Entities.FeedBackAddOn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FeedBackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedBackId");

                    b.ToTable("FeedBackAddOn");
                });

            modelBuilder.Entity("ITC.Data.Entities.FileTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateUpLoad")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TraceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FileTracking");
                });

            modelBuilder.Entity("ITC.Data.Entities.JoinProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_BlogId");

                    b.HasIndex(new[] { "ProjectId" }, "IX_JoinProject_ProjectId");

                    b.HasIndex(new[] { "StaffId" }, "IX_JoinProjectt_StaffId");

                    b.ToTable("JoinProject", (string)null);
                });

            modelBuilder.Entity("ITC.Data.Entities.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MajorFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Major");
                });

            modelBuilder.Entity("ITC.Data.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BodyCustom")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TaskCommnetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UserSendId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ITC.Data.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Local")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("ITC.Data.Entities.Phase", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Phase");
                });

            modelBuilder.Entity("ITC.Data.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("ITC.Data.Entities.PostImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("ITC.Data.Entities.Program", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("ITC.Data.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("CheckNegotiationStatus")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ConfigProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreaterAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EstimateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OfficalTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OfficalTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProjectStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ConfigProjectId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreaterAccountId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProjectName")
                        .IsUnique()
                        .HasFilter("[ProjectName] IS NOT NULL");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ITC.Data.Entities.ProjectPhase", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PhaseId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPhase");
                });

            modelBuilder.Entity("ITC.Data.Entities.Reason", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeputyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeputyId");

                    b.HasIndex("SlotId");

                    b.ToTable("Reason");
                });

            modelBuilder.Entity("ITC.Data.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCloseRegis")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOpenRegis")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberPassPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentRegistrationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PassportImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScocialLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImageBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YourEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentRegistrationsId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("ITC.Data.Entities.RegistrationAddOn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("RegistrationAddOn");
                });

            modelBuilder.Entity("ITC.Data.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Session")
                        .HasColumnType("int");

                    b.Property<int>("SlotStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeAllocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("ITC.Data.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsHeadOfDepartMent")
                        .HasColumnType("bit");

                    b.Property<string>("StaffCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("ITC.Data.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MajorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OldRollNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RollNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Semeter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("MajorId");

                    b.HasIndex("MemberCode")
                        .IsUnique()
                        .HasFilter("[MemberCode] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("PhoneNumber IS NOT NULL");

                    b.HasIndex("RollNumber")
                        .IsUnique()
                        .HasFilter("[RollNumber] IS NOT NULL");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("ITC.Data.Entities.Syllabus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Syllabus");
                });

            modelBuilder.Entity("ITC.Data.Entities.Tasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Creater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PhaseId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ITC.Data.Entities.AssignTask", b =>
                {
                    b.HasOne("ITC.Data.Entities.Staff", "Staffs")
                        .WithMany("AssignTasks")
                        .HasForeignKey("StaffId");

                    b.HasOne("ITC.Data.Entities.Tasks", "Tasks")
                        .WithMany("AssignTasks")
                        .HasForeignKey("TasksId");

                    b.Navigation("Staffs");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ITC.Data.Entities.Campus", b =>
                {
                    b.HasOne("ITC.Data.Entities.Partner", "Partner")
                        .WithMany("Campuses")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("ITC.Data.Entities.CancelProject", b =>
                {
                    b.HasOne("ITC.Data.Entities.Project", "Project")
                        .WithOne("CancelProjects")
                        .HasForeignKey("ITC.Data.Entities.CancelProject", "ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ITC.Data.Entities.CommentTask", b =>
                {
                    b.HasOne("ITC.Data.Entities.Tasks", "Tasks")
                        .WithMany("CommentTasks")
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ITC.Data.Entities.Course", b =>
                {
                    b.HasOne("ITC.Data.Entities.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorAccountId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ITC.Data.Entities.Deputy", b =>
                {
                    b.HasOne("ITC.Data.Entities.Account", "Account")
                        .WithOne("Deputy")
                        .HasForeignKey("ITC.Data.Entities.Deputy", "AccountId");

                    b.HasOne("ITC.Data.Entities.Partner", "Partner")
                        .WithMany("Deputies")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("ITC.Data.Entities.Document", b =>
                {
                    b.HasOne("ITC.Data.Entities.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ITC.Data.Entities.FeedBack", b =>
                {
                    b.HasOne("ITC.Data.Entities.FeedBack", "FeedBacks")
                        .WithMany("ChildrenFeedBacKs")
                        .HasForeignKey("FeedBacksId");

                    b.HasOne("ITC.Data.Entities.Registration", "Registration")
                        .WithMany("FeedBacks")
                        .HasForeignKey("RegistrationId");

                    b.Navigation("FeedBacks");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("ITC.Data.Entities.FeedBackAddOn", b =>
                {
                    b.HasOne("ITC.Data.Entities.FeedBack", "FeedBack")
                        .WithMany("FeedBackAddOns")
                        .HasForeignKey("FeedBackId");

                    b.Navigation("FeedBack");
                });

            modelBuilder.Entity("ITC.Data.Entities.JoinProject", b =>
                {
                    b.HasOne("ITC.Data.Entities.Project", "Project")
                        .WithMany("JoinProjects")
                        .HasForeignKey("ProjectId")
                        .IsRequired();

                    b.HasOne("ITC.Data.Entities.Staff", "Staffs")
                        .WithMany("JoinProjects")
                        .HasForeignKey("StaffId")
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("ITC.Data.Entities.Notification", b =>
                {
                    b.HasOne("ITC.Data.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ITC.Data.Entities.Post", b =>
                {
                    b.HasOne("ITC.Data.Entities.Staff", "Staffs")
                        .WithMany("Posts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("ITC.Data.Entities.PostImage", b =>
                {
                    b.HasOne("ITC.Data.Entities.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ITC.Data.Entities.Project", b =>
                {
                    b.HasOne("ITC.Data.Entities.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("ITC.Data.Entities.ConfigProject", "ConfigProject")
                        .WithMany()
                        .HasForeignKey("ConfigProjectId");

                    b.HasOne("ITC.Data.Entities.Course", "Course")
                        .WithMany("Projects")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITC.Data.Entities.Account", "Creater")
                        .WithMany()
                        .HasForeignKey("CreaterAccountId");

                    b.HasOne("ITC.Data.Entities.Partner", "Partner")
                        .WithMany("Projects")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITC.Data.Entities.Program", "Program")
                        .WithMany("Projects")
                        .HasForeignKey("ProgramId");

                    b.Navigation("Campus");

                    b.Navigation("ConfigProject");

                    b.Navigation("Course");

                    b.Navigation("Creater");

                    b.Navigation("Partner");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("ITC.Data.Entities.ProjectPhase", b =>
                {
                    b.HasOne("ITC.Data.Entities.Phase", "Phase")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("PhaseId");

                    b.HasOne("ITC.Data.Entities.Project", "Project")
                        .WithMany("ProjectPhase")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Phase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ITC.Data.Entities.Reason", b =>
                {
                    b.HasOne("ITC.Data.Entities.Deputy", "Deputies")
                        .WithMany()
                        .HasForeignKey("DeputyId");

                    b.HasOne("ITC.Data.Entities.Slot", "Slot")
                        .WithMany("Reasons")
                        .HasForeignKey("SlotId");

                    b.Navigation("Deputies");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("ITC.Data.Entities.Registration", b =>
                {
                    b.HasOne("ITC.Data.Entities.Registration", "ParentRegistrations")
                        .WithMany("ChildrenRegistrations")
                        .HasForeignKey("ParentRegistrationsId");

                    b.HasOne("ITC.Data.Entities.Project", "Project")
                        .WithMany("Registrations")
                        .HasForeignKey("ProjectId");

                    b.HasOne("ITC.Data.Entities.Student", "Student")
                        .WithMany("Registration")
                        .HasForeignKey("StudentId");

                    b.Navigation("ParentRegistrations");

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ITC.Data.Entities.RegistrationAddOn", b =>
                {
                    b.HasOne("ITC.Data.Entities.Registration", "Registration")
                        .WithMany("RegistrationAddOn")
                        .HasForeignKey("RegistrationId");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("ITC.Data.Entities.Slot", b =>
                {
                    b.HasOne("ITC.Data.Entities.Syllabus", "Syllabus")
                        .WithMany("Slots")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("ITC.Data.Entities.Staff", b =>
                {
                    b.HasOne("ITC.Data.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("ITC.Data.Entities.Staff", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ITC.Data.Entities.Student", b =>
                {
                    b.HasOne("ITC.Data.Entities.Major", "Major")
                        .WithMany("Students")
                        .HasForeignKey("MajorId");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("ITC.Data.Entities.Syllabus", b =>
                {
                    b.HasOne("ITC.Data.Entities.Course", "Course")
                        .WithMany("Syllabus")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITC.Data.Entities.Partner", "Partner")
                        .WithMany("Syllabus")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Course");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("ITC.Data.Entities.Tasks", b =>
                {
                    b.HasOne("ITC.Data.Entities.Tasks", "ParentTask")
                        .WithMany("ChildrenTask")
                        .HasForeignKey("ParentId");

                    b.HasOne("ITC.Data.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("ITC.Data.Entities.ProjectPhase", "ProjectPhase")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectPhaseId");

                    b.Navigation("ParentTask");

                    b.Navigation("Project");

                    b.Navigation("ProjectPhase");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITC.Data.Entities.Account", b =>
                {
                    b.Navigation("Deputy");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ITC.Data.Entities.Course", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("ITC.Data.Entities.FeedBack", b =>
                {
                    b.Navigation("ChildrenFeedBacKs");

                    b.Navigation("FeedBackAddOns");
                });

            modelBuilder.Entity("ITC.Data.Entities.Major", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ITC.Data.Entities.Partner", b =>
                {
                    b.Navigation("Campuses");

                    b.Navigation("Deputies");

                    b.Navigation("Projects");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("ITC.Data.Entities.Phase", b =>
                {
                    b.Navigation("ProjectPhases");
                });

            modelBuilder.Entity("ITC.Data.Entities.Post", b =>
                {
                    b.Navigation("PostImages");
                });

            modelBuilder.Entity("ITC.Data.Entities.Program", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ITC.Data.Entities.Project", b =>
                {
                    b.Navigation("CancelProjects");

                    b.Navigation("Documents");

                    b.Navigation("JoinProjects");

                    b.Navigation("ProjectPhase");

                    b.Navigation("Registrations");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ITC.Data.Entities.ProjectPhase", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ITC.Data.Entities.Registration", b =>
                {
                    b.Navigation("ChildrenRegistrations");

                    b.Navigation("FeedBacks");

                    b.Navigation("RegistrationAddOn");
                });

            modelBuilder.Entity("ITC.Data.Entities.Slot", b =>
                {
                    b.Navigation("Reasons");
                });

            modelBuilder.Entity("ITC.Data.Entities.Staff", b =>
                {
                    b.Navigation("AssignTasks");

                    b.Navigation("JoinProjects");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ITC.Data.Entities.Student", b =>
                {
                    b.Navigation("Registration");
                });

            modelBuilder.Entity("ITC.Data.Entities.Syllabus", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("ITC.Data.Entities.Tasks", b =>
                {
                    b.Navigation("AssignTasks");

                    b.Navigation("ChildrenTask");

                    b.Navigation("CommentTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
